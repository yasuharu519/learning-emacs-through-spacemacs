* Functions

elispでの関数について

** defconst

#+BEGIN_SRC emacs-lisp
  (defconst SYMBOL INITVALUE [DOCSTRING])
#+END_SRC

=SYMBOL= を =INITVALUE= で定義

** defun

#+BEGIN_SRC emacs-lisp
  (defun NAME ARGLIST &optional DOCSTRING DECL &rest BODY)
#+END_SRC

=NAME= は関数名。
=(lam= を連結してstringを返す

** unless

#+BEGIN_SRC emacs-lisp
  (unless COND BODY...)
#+END_SRC

=COND= が =nil= であれば、 =BODY= を実行し、そうでなければ =nil= を返す。
=BODY= を実行した際は、順に実行され、最後の値が返される。

** file-exists-p

#+BEGIN_SRC emacs-lisp
  (file-exists-p FILENAME)
#+END_SRC

=FILENAME= が存在すれば=t=を返す。
存在しないファイルへのシムリンクであれば =nil= を返す。


** make-directory

#+BEGIN_SRC emacs-lisp
  (make-directory DIR &optional PARENTS)
#+END_SRC

=DIR= のディレクトリを作成。

** mapc

#+BEGIN_SRC emacs-lisp
  (mapc FUNCTION SEQUENCE)
#+END_SRC

=SEQUENCE= の要素に =FUNCTION= を適用させる。
結果の値を返さず、 =SEQUENCE= が返される。

** current-time

#+BEGIN_SRC emacs-lisp
  (current-time)
#+END_SRC

=1970-01-01 00:00:00= からの経過秒を返す。
返される値は =(HIGH LOW USEC PSEC)= の形式。

HIGH has the most significant bits of the seconds, while LOW has the
least significant 16 bits.  USEC and PSEC are the microsecond and
picosecond counts.


** featurep

#+BEGIN_SRC emacs-lisp
  (featurep FEATURE &optional SUBFEATURE)
#+END_SRC

=FEATURE= を使うことで、使用可能状態であることを示す。 
この関数では =features= 変数をみる。
=SUBFEATURE= 変数は、 =FEATURE= のサブを示すために使用する。

** mapconcat

#+BEGIN_SRC emacs-lisp
  (mapconcat FUNCTION SEQUENCE SEPARATOR)
#+END_SRC

=FUNCTION= を =SEQUENCE= に適用し、返り値を結合したものを返す。

** identity

#+BEGIN_SRC emacs-lisp
  (identity ARG)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (identity 'aaa)
  -> aaa
  (mapconcat 'identity '("aaa" "bbb" "CCC") "/")
#+END_SRC

きた値をそのまま返す

** string-match

#+BEGIN_SRC emacs-lisp
  (string-match REGEXP STRING &optional START)
#+END_SRC

=REGEXP= に =STRING= 内で最初にマッチしたindexを返す。
マッチしなければnilを返す。
=START= が =nil= でなければ、そのindexから探索を開始する。

** replace-match

#+BEGIN_SRC emacs-lisp
(replace-match NEWTEXT &optional FIXEDCASE LITERAL STRING SUBEXP)
#+END_SRC

最後のサーチでマッチした部分を =NEWTEXT＝ で置換する。

** defmacro

#+BEGIN_SRC emacs-lisp
  (defmacro NAME ARGLIST &optional DOCSTRING DECL &rest BODY)
#+END_SRC

=NAME= をマクロとして定義。
=(NAME ARGS..)= として、マクロが呼び出された場合は、 =(lambda ARGLIST BODY...)= として、 =ARGS...= に適用される。

** intern

#+BEGIN_SRC emacs-lisp
  (intern STRING &optional OBARRAY)
#+END_SRC

そもそも、名前のシンボルを探したり追加したりすることをインターンニングと呼ぶ。
この関数は、 =name= を名前とするインターンしたシンボルを返す。 
そのようなシンボルがオブジェクト配列 =obarray= に存在しなければ、
internは新たなものを作成し、それをオブジェクト配列に追加してから、 それを返す。 
obarrayを省略すると、グローバル変数obarrayの値を使う。

** set

#+BEGIN_SRC emacs-lisp
  (set SYMBOL NEWVAL)
#+END_SRC

シンボルの値を新しい値に変更して返す

** add-hook

#+BEGIN_SRC emacs-lisp
  (add-hook HOOK FUNCTION &optional APPEND LOCAL)
#+END_SRC

=HOOK= に =FUNCTION= を登録。
既に登録されている場合、 =FUNCTION= は登録されない。
=FUNCTION= は、 =APPEND= が =t= でないかぎり、フックの一番最初に追加。

=LOCAL= が =nil= でなければ、バッファローカルに登録される。


** make-variable-buffer-local

#+BEGIN_SRC emacs-lisp
  (make-variable-buffer-local VARIABLE)
#+END_SRC

バッファローカルな変数を作成。

** memq

#+BEGIN_SRC emacs-lisp
  (memq ELT LIST)
#+END_SRC

=ELT= が =LIST= に含まれていれば =nil= 以外をかえす。
比較は =eq= で行われる。

** deftheme

#+BEGIN_SRC emacs-lisp
  (deftheme THEME &optional DOC &rest IGNORED)
#+END_SRC

カスタムテーマを =THEME= として定義。
例えば、 =foo= というテーマは =foo-theme.el= というファイルで定義されているべき。

** assq

#+BEGIN_SRC emacs-lisp
  (assq KEY LIST)
#+END_SRC

=LIST= に含まれる cons の中で、 =car= が =KEY= と =eq= で =nil= 以外になるものがあれば、 =nil= 以外を返す。

#+BEGIN_SRC emacs-lisp
  (assq 'key1 '((key . key) (key1 . key1) (key2 . key2)))
#+END_SRC

** let*

#+BEGIN_SRC emacs-lisp
(let* VARLIST BODY...)
#+END_SRC

=VARLIST= として宣言された変数を定義し、 =BODY= を実行する。
=BODY= の最後に実行されたものが値として返される。
=VARLIST= の中身は、シンボル、 =(SYMBOL VALUEFORM)= 形式のリスト、である必要がある。

let との違いは、中で宣言しているものに対して参照が可能


** load-theme

#+BEGIN_SRC emacs-lisp
  (load-theme THEME &optional NO-CONFIRM NO-ENABLE)
#+END_SRC

カスタムテーマのロード。
テーマファイルは =THEME-theme.el= という名前である必要がある。
=custom-theme-load-path= で指定されたディレクトリ内にある必要がある。

正しくロードされた場合は =t= を返す。そうでない場合は =nil= 。

** disable-theme

#+BEGIN_SRC emacs-lisp
(disable-theme THEME)
#+END_SRC

=THEME= によって、設定されたものをdisableに。

** append

#+BEGIN_SRC emacs-lisp
  (append &rest SEQUENCES)
#+END_SRC

追記

** pop

#+BEGIN_SRC emacs-lisp
  (pop PLACE)
#+END_SRC

最初のエレメントを取得。リストからは削除。

** message

#+BEGIN_SRC emacs-lisp
  (message FORMAT-STRING &rest ARGS)
#+END_SRC

=*Message*= に追記するのと、下にメッセージを表示。

** defadvice

#+BEGIN_SRC emacs-lisp
(defadvice FUNCTION ARGS &rest BODY)
#+END_SRC

完全なフォーマットはこちら

adviceを使うことで、現状ある関数を再定義することが可能。ただし、Emacs24.4 では、新しいアドバイス定義方法がある。

[[http://rubikitch.com/2014/10/30/nadvice/][nadvice]]を参考

#+BEGIN_SRC emacs-lisp
  (defadvice FUNCTION (CLASS NAME [POSITION] [ARGLIST] FLAG...)
    [DOCSTRING] [INTERACTIVE-FORM]
    BODY...)
#+END_SRC

長いので定義は省略

** fboundp

#+BEGIN_SRC emacs-lisp
  (fboundp SYMBOL)
#+END_SRC

シンボルに関数が定義されていれば =t=

** consp

#+BEGIN_SRC emacs-lisp
(consp OBJECT)
#+END_SRC

=OBJECT= がコンスセルであれば =t=

** keywordp

#+BEGIN_SRC emacs-lisp
(keywordp OBJECT)
#+END_SRC

=OBJECT= がキーワードであれば =t=

** nreverse

#+BEGIN_SRC emacs-lisp
(nreverse LIST)
#+END_SRC

逆順にして返す

#+BEGIN_SRC emacs-lisp
  (setq l '("aaa" "bbb" "ccc"))
  (nreverse l)
#+END_SRC

** find-file-noselect

#+BEGIN_SRC emacs-lisp
  (find-file-noselect FILENAME &optional NOWARN RAWFILE WILDCARDS)
#+END_SRC

=FILENAME= のファイルを読み込み、バッファを返す。
既にバッファが作成されていれば、それを返す。


** set-buffer

#+BEGIN_SRC emacs-lisp
(set-buffer BUFFER-OR-NAME)
#+END_SRC

バッファ =BUFFER-OR-NAME= を現在編集中のバッファとして設定する。

** file-name-directory

#+BEGIN_SRC emacs-lisp
(file-name-directory FILENAME)
#+END_SRC

=FILENAME= の名前のディレクトリコンポーネントを返す?

** save-buffer

#+BEGIN_SRC emacs-lisp
(save-buffer &optional ARG)
#+END_SRC

バッファをセーブする

** kill-buffer

#+BEGIN_SRC emacs-lisp
(kill-buffer &optional BUFFER-OR-NAME)
#+END_SRC

=BUFFER-OR-NAME= のバッファを kill する。


** loop

#+BEGIN_SRC emacs-lisp
(loop CLAUSE...)
#+END_SRC

ループマクロ

書き方
#+BEGIN_SRC emacs-lisp
  For clauses:
    for VAR from/upfrom/downfrom EXPR1 to/upto/downto/above/below EXPR2 by EXPR3
    for VAR = EXPR1 then EXPR2
    for VAR in/on/in-ref LIST by FUNC
    for VAR across/across-ref ARRAY
    for VAR being:
      the elements of/of-ref SEQUENCE [using (index VAR2)]
      the symbols [of OBARRAY]
      the hash-keys/hash-values of HASH-TABLE [using (hash-values/hash-keys V2)]
      the key-codes/key-bindings/key-seqs of KEYMAP [using (key-bindings VAR2)]
      the overlays/intervals [of BUFFER] [from POS1] [to POS2]
      the frames/buffers
      the windows [of FRAME]
  Iteration clauses:
    repeat INTEGER
    while/until/always/never/thereis CONDITION
  Accumulation clauses:
    collect/append/nconc/concat/vconcat/count/sum/maximize/minimize FORM
      [into VAR]
  Miscellaneous clauses:
    with VAR = INIT
    if/when/unless COND CLAUSE [and CLAUSE]... else CLAUSE [and CLAUSE...]
    named NAME
    initially/finally [do] EXPRS...
    do EXPRS...
    [finally] return EXPR
#+END_SRC

** symbol-value

#+BEGIN_SRC emacs-lisp
(symbol-value SYMBOL)
#+END_SRC

=SYMBOL= の値を返す。 void の場合はエラーを返す。


** redisplay

#+BEGIN_SRC emacs-lisp
(redisplay &optional FORCE)
#+END_SRC

再描画を行う

** dolist

#+BEGIN_SRC emacs-lisp
(dolist (VAR LIST [RESULT]) BODY...)
#+END_SRC

** find-file


#+BEGIN_SRC emacs-lisp
(find-file FILENAME &optional WILDCARDS)
#+END_SRC

=FILENAME= のファイルを探して編集。


** goto-char

#+BEGIN_SRC emacs-lisp
(goto-char POSITION)
#+END_SRC

移動する。
バッファの最初は point_min, 最後は point_max

** re-search-forward

#+BEGIN_SRC emacs-lisp
(re-search-forward REGEXP &optional BOUND NOERROR COUNT)
#+END_SRC

Search forward from point for regular expression REGEXP.
Set point to the end of the occurrence found, and return point.
An optional second argument bounds the search; it is a buffer position.
The match found must not extend after that position.
Optional third argument, if t, means if fail just return nil (no error).
  If not nil and not t, move to limit of search and return nil.
Optional fourth argument is repeat count--search for successive occurrences.

Search case-sensitivity is determined by the value of the variable
`case-fold-search', which see.

See also the functions `match-beginning', `match-end', `match-string',
and `replace-match'.

** beginning-of-line

(beginning-of-line &optional N)

Move point to beginning of current line (in the logical order).
With argument N not nil or 1, move forward N - 1 lines first.
If point reaches the beginning or end of buffer, it stops there.

This function constrains point to the current field unless this moves
point to a different line than the original, unconstrained result.
If N is nil or 1, and a front-sticky field starts at point, the point
does not move.  To ignore field boundaries bind
`inhibit-field-text-motion' to t, or use the `forward-line' function
instead.  For instance, `(forward-line 0)' does the same thing as
`(beginning-of-line)', except that it ignores field boundaries.


** insert-file-contents

#+BEGIN_SRC emacs-lisp
(insert-file-contents FILENAME &optional VISIT BEG END REPLACE)
#+END_SRC

ポイントの後に =FILENAME= のファイルを挿入する。
絶対パスと、挿入された文字数が返される。

=BEG= と =END= を指定することで、ファイルの一部を挿入することもできる。ただし、文字数ではなくてバイト数で指定。
=VISIT= が nilでなければ、 =BEG= , =END= は nilである必要がある。

** display-graphic-p

#+BEGIN_SRC emacs-lisp
(display-graphic-p &optional DISPLAY)
#+END_SRC

=DISPLAY= がグラフィックディスプレイでなければ nil 以外を返す。

** image-type-available-p

#+BEGIN_SRC emacs-lisp
(image-type-available-p TYPE)
#+END_SRC

指定した画像形式が利用可能であれば =t= 


** integerp

#+BEGIN_SRC emacs-lisp
(integerp OBJECT)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (integerp 1)
  (integerp 1.0)
  (floatp 1.0)
  (floatp 1)
#+END_SRC

integerであれば =t= 

** length

#+BEGIN_SRC emacs-lisp
(length SEQUENCE)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (length "sawada")
  (length "尾頭")
  (length '(a b c))
#+END_SRC

vectorの長さや、リスト、stringの長さを返す。
マルチバイトキャラクターの場合は文字数となる。
バイト数を数えたい場合は string-bytes を使うこと。


** random

#+BEGIN_SRC emacs-lisp
(random &optional LIMIT)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (random)
  (random 10)
  (random "sawada")
#+END_SRC

擬似乱数を返す。

=LIMIT= が与えられた場合は、[0, LIMIT) のなかで返す。
=t= が与えられれば、今の時間とpidからシードを設定する
stringがセットされれば、その値からシードをセットする。

** nth

#+BEGIN_SRC emacs-lisp
(nth N LIST)
#+END_SRC

N番目の要素を返す。長さが足りない場合はnil.

** create-image

#+BEGIN_SRC emacs-lisp
(create-image FILE-OR-DATA &optional TYPE DATA-P &rest PROPS)
#+END_SRC

イメージを作成。 =FILE-OR-DATA= はファイル名かイメージデータ。
=DATA-P= が nil でなければ、イメージデータが入力されたことを表す。

** image-size

#+BEGIN_SRC emacs-lisp
(image-size SPEC &optional PIXELS FRAME)
#+END_SRC

=(WIDTH . HEIGHT)= のペアでイメージデータのサイズを返す。


** floor

#+BEGIN_SRC emacs-lisp
(floor ARG &optional DIVISOR)
#+END_SRC

=ARG= よりも大きくなくて、最大の整数を返す。
=DIVISOR= が渡されると、それで割る。

** make-string

#+BEGIN_SRC emacs-lisp
  (make-string LENGTH INIT)
  (insert (make-string 10 ?\ ))
#+END_SRC

=LENGTH= の長さの string を返す。


** save-excursion

#+BEGIN_SRC emacs-lisp
(save-excursion &rest BODY)
#+END_SRC

現在のマークやバッファ、などを保持しておき、最終的にリストアする。


** widget-create

#+BEGIN_SRC emacs-lisp
(widget-create TYPE &rest ARGS)
#+END_SRC

=TYPE= のウィジットを作成する。












