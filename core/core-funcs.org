* core-funcs.el

** 関数

- [[file:../functions.org::*consp][consp]]
- [[file:../functions.org::*keywordp][keywordp]]
- [[file:../functions.org::*nreverse][nreverse]]
- [[file:../functions.org::*find-file-noselect][find-file-noselect]]
- [[file:../functions.org::*set-buffer][set-buffer]]
- [[file:../functions.org::*file-name-directory][file-name-directory]]
- [[file:../functions.org::*save-buffer][save-buffer]]
- [[file:../functions.org::*kill-buffer][kill-buffer]]
- [[file:../functions.org::*loop][loop]]
- [[file:../functions.org::*symbol-value][symbol-value]]
- [[file:../functions.org::*redisplay][redisplay]]
- [[file:../functions.org::*dolist][dolist]]
- [[file:../functions.org::*find-file][find-file]]
- [[file:../functions.org::*goto-char][goto-char]]
- [[file:../functions.org::*re-search-forward][re-search-forward]]
- [[file:../functions.org::*beginning-of-line][beginning-of-line]]

  
** 変数

** 処理

#+BEGIN_SRC emacs-lisp
  (defun spacemacs/mplist-get (plist prop)
    "Get the values associated to PROP in PLIST, a modified plist.

  A modified plist is one where keys are keywords and values are
  all non-keywords elements that follow it.

  If there are multiple properties with the same keyword, only the first property
  and its values is returned.

  Currently this function infloops when the list is circular."
    (let ((tail plist)
          result)
      (while (and (consp tail) (not (eq prop (car tail))))
        (pop tail))
      ;; pop the found keyword
      (pop tail)
      (while (and (consp tail) (not (keywordp (car tail))))
        (push (pop tail) result))
      (nreverse result)))
#+END_SRC

plist内にのプロパティから値を取り出す。
keyがキーワードで、キーワードでないものがバリューとして使われる。

#+BEGIN_SRC emacs-lisp
  (defun spacemacs/mplist-remove (plist prop)
    "Return a copy of a modified PLIST without PROP and its values.

  If there are multiple properties with the same keyword, only the first property
  and its values are removed."
    (let ((tail plist)
          result)
      (while (and (consp tail) (not (eq prop (car tail))))
        (push (pop tail) result))
      (when (eq prop (car tail))
        (pop tail)
        (while (and (consp tail) (not (keywordp (car tail))))
          (pop tail)))
      (while (consp tail)
        (push (pop tail) result))
      (nreverse result)))
#+END_SRC

plistの中の物をけす?

#+BEGIN_SRC emacs-lisp
  ;; From http://stackoverflow.com/questions/2321904/elisp-how-to-save-data-in-a-file
  (defun spacemacs/dump-vars-to-file (varlist filename)
    "simplistic dumping of variables in VARLIST to a file FILENAME"
    (save-excursion
      (let ((buf (find-file-noselect filename)))
        (set-buffer buf)
        (erase-buffer)
        (spacemacs/dump varlist buf)
        (make-directory (file-name-directory filename) t)
        (save-buffer)
        (kill-buffer))))
#+END_SRC

=VARLIST= の変数を =FILENAME= に書き出し

ファイルを開いたバッファを作成し、そこにダンプしてセーブする。

#+BEGIN_SRC emacs-lisp
  ;; From http://stackoverflow.com/questions/2321904/elisp-how-to-save-data-in-a-file
  (defun spacemacs/dump (varlist buffer)
    "insert into buffer the setq statement to recreate the variables in VARLIST"
    (loop for var in varlist do
          (print (list 'setq var (list 'quote (symbol-value var)))
                 buffer)))
#+END_SRC

=VARLIST= の変数をあらたに作成できるよう?


#+BEGIN_SRC emacs-lisp
  (defvar spacemacs--init-redisplay-count 0
    "The number of calls to `redisplay'")
  (defun spacemacs//redisplay ()
    "`redisplay' wrapper."
    (setq spacemacs--init-redisplay-count (1+ spacemacs--init-redisplay-count))
    (redisplay))
#+END_SRC

再描画回数のカウント
再描画関数

#+BEGIN_SRC emacs-lisp
  (defun spacemacs//create-key-binding-form (props func)
    "Helper which returns a from to bind FUNC to a key according to PROPS.

  Supported properties:

  `:evil-leader STRING'
      One or several key sequence strings to be set with `evil-leader/set-key'.

  `:evil-leader-for-mode CONS CELL'
      One or several cons cells (MODE . KEY) where MODE is a major-mode symbol
      and KEY is a key sequence string to be set with
      `evil-leader/set-key-for-mode'.

  `:global-key STRING'
      One or several key sequence strings to be set with `global-set-key'.

  `:define-key CONS CELL'
      One or several cons cells (MAP . KEY) where MAP is a mode map and KEY is a
      key sequence string to be set with `define-key'. "
    (let ((evil-leader (spacemacs/mplist-get props :evil-leader))
          (evil-leader-for-mode (spacemacs/mplist-get props :evil-leader-for-mode))
          (global-key (spacemacs/mplist-get props :global-key))
          (def-key (spacemacs/mplist-get props :define-key)))
      `((unless (null ',evil-leader)
          (dolist (key ',evil-leader)
            (evil-leader/set-key key ',func)))
        (unless (null ',evil-leader-for-mode)
          (dolist (val ',evil-leader-for-mode)
            (evil-leader/set-key-for-mode
              (car val) (cdr val) ',func)))
        (unless (null ',global-key)
          (dolist (key ',global-key)
            (global-set-key (kbd key) ',func)))
        (unless (null ',def-key)
          (dolist (val ',def-key)
            (define-key (eval (car val)) (kbd (cdr val)) ',func))))))
#+END_SRC

キーの設定を補助



#+BEGIN_SRC emacs-lisp
  (defun spacemacs/open-change-log ()
    "Open the change log for the current version."
    (interactive)
    ;; For now hardcode it
    (find-file (concat user-emacs-directory "CHANGELOG.org"))
    (goto-char (point-min))
    (re-search-forward "Releases 0.101.x")
    (beginning-of-line)
    (show-subtree))

  (provide 'core-funcs)
#+END_SRC

チェンジログを表示

